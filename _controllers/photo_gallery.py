#!/usr/bin/env python

"""Full-featured photo gallery for Blogofile

This photo gallery features nested albums, Markdown captions for everything,
autogenerated thumbnails, navigation breadcrumbs, and Disqus comments.

To enable it:

1. Install Python Imaging Library, like "easy_install PIL"
2. Add something like this to your _config.py:

    controllers.photo_gallery.enabled = True
    controllers.photo_gallery.path = "pictures"
    controllers.photo_gallery.thumbnailsize = (200, 200)

3. Add something like this to your site's CSS file:

    .thumbnail { height: 128px; width: auto; margin: 5px; }
    .photo { width: 90%; }
    .gallery { float: left; margin: 10px; }
    .clear-block:after { clear:both; content:"."; display:block; height:0; visibility:hidden; }
    .clear-block { display:block; }
    * html .clear-block { height:1%; }

4. Copy your photos into the directory named in photo_gallery.path in step 2.

5. Directories can either display links to subdirectories (an "album index")
*or* an index of the photos inside that directory, but not both. If a
directory contains both images and subdirectories, it will only render the
photo index and not the album index.

6. In each photo index, make a symlink called "showcase.jpg" to the image you
want to use as the link image in the album index which points to that photo
index. Note: you'll probably want to link to to "photo-thumb.jpg" or possibly
"photo-medium.jpg" instead of "photo.jpg" unless you had your visitors and
want to abuse them.

To add a caption to a directory, create a file in that directory named
"index.markdown".

To add a caption to a subdirectory named "foo", create a file named
"foo.markdown" in its parent directory.

To add a caption to "photo.jpg", create a file named "photo.jpg.markdown".

Inspired by Louwrentius's "'Improved' image gallery for Blogofile" at
http://louwrentius.com/blog/2011/01/'improved'-image-gallery-for-blogofile/
"""

import logging
import os
import string  # pylint: disable=W0402
from PIL import Image

from blogofile.cache import bf
from blogofile.config import recompile

config = {  # pylint: disable=C0103
    'name': 'Photo Galleries',
    'description': 'Nested photo albums with thumbnails, breadcrumbs, Markdown captions, etc.',
    'author': 'Kirk Strauser <kirk@strauser.com>',
    'mediumsize': (800, 600),
    'thumbnailsize': (128, 128),
}

MODULELOG = logging.getLogger(__name__)
MODULELOG.setLevel(logging.INFO)

CONFIG = bf.config.controllers.photo_gallery

SLUGS = set()


def init():
    """Update the config to remove photo gallery caption files from _site"""
    photopath = bf.config.controllers.photo_gallery.path
    bf.config.site.file_ignore_patterns.append(
        '^%s/.*\.markdown$' % photopath)
    recompile()


def run():
    """Recursively build the photo galleries and directory indexes"""
    MODULELOG.info('Building the photo galleries')
    processsubdirectories([CONFIG.path])
    generatealbumindex([CONFIG.path])


def getsubdirs(dirname):
    """Return a list of names of subdirectories in the named directory"""
    return [subdir for subdir in sorted(os.listdir(dirname))
            if os.path.isdir(os.path.join(dirname, subdir))]


def generatealbumindex(pathelements):
    """Create an index page with links to all child albums in the directory"""
    dirname = os.path.join(*pathelements)  # pylint: disable=W0142
    subdirs = [{'name': subdir,
                'caption': getcaptionfromfile(os.path.join(dirname, subdir + '.markdown'))}
       for subdir in getsubdirs(dirname)
       if os.listdir(os.path.join(dirname, subdir))]
    bf.writer.materialize_template(
        'photo_album_index.mako',
        (dirname, "index.html"),
        {'breadcrumbs': makebreadcrumbs(pathelements),
         'caption': getcaptionfromfile(os.path.join(dirname, 'index.markdown')),
         'indexurl': makeurl(pathelements, ''),
         'slug': makepathslug(pathelements),
         'subdirs': subdirs,
         'title': '%s gallery' % pathelements[-1]})


def getcaptionfromfile(filename):
    """Return the contents of the named file after running it through the
    markdown filter"""
    try:
        with open(filename) as captionfile:
            return bf.filter.run_chain('markdown', captionfile.read())
    except IOError:
        return ''


def makebreadcrumbs(pathelements):
    """Return HTML representing the path to the deepest element, where each
    ancestor (but not the current directory) is a clickable to that directory"""
    breadcrumbs = []
    curpath = '/'
    for element in pathelements[:-1]:
        curpath = curpath + element + '/'
        breadcrumbs.append('<a href="%s">%s</a>' % (curpath, element))
    breadcrumbs.append(pathelements[-1])
    return '&nbsp;/&nbsp;'.join(breadcrumbs)


def makepathslug(pathelements):
    """Return a distinct identifier for the given path"""
    return 'photo-gallery-' + '-'.join(pathelements)


def makeurl(pathelements, filename):
    """Given all the elements describing a location, return a link to it"""
    return '%s%s/%s' % (
        bf.config.site.url,
        '/'.join(pathelements),
        filename)


def prepareimage(filename):
    """If the file is a not an image we want to display in the gallery, return
    None. Otherwise generate all appropriate thumbnails and return a dict
    with their types and filenames."""
    testname = filename.lower()

    # Skip all files that aren't jpgs or that are reduced-size versions of
    # other jpgs.
    if not testname.endswith('.jpg') or os.path.islink(testname):
        return None
    for ignore in ['-medium.jpg', '-thumb.jpg']:
        if testname.endswith(ignore):
            return None

    photoinfo = {'original': os.path.basename(filename)}
    namebase, extension = os.path.splitext(filename)
    for imagetype, size in [('thumb', CONFIG.thumbnailsize),
                            ('medium', CONFIG.mediumsize)]:
        reducedfilename = '%s-%s%s' % (namebase, imagetype, extension)
        photoinfo[imagetype] = os.path.basename(reducedfilename)
        if os.path.exists(reducedfilename):
            continue
        MODULELOG.debug('Making %s version of %s: %s', imagetype, filename, reducedfilename)
        image = Image.open(filename)
        image.thumbnail(size, Image.ANTIALIAS)
        image.save(reducedfilename, 'JPEG')

    # Generate a unique identifier for each image. Note! If
    goodchars = string.lowercase + string.digits
    slug = ''.join(char if char in goodchars else '-' for char in photoinfo['original'].lower())
    while '--' in slug:
        slug = slug.replace('--', '-')
    slug = slug.strip('-')

    if slug in SLUGS:
        MODULELOG.warning('Duplicate slug for %s', filename)
        if slug[-1].isdigit():
            slug = slug.rsplit('-', 1)[0]
        counter = 1
        while True:
            newslug = '%s-%d' % (slug, counter)
            if newslug not in SLUGS:
                slug = newslug
                break
    SLUGS.add(slug)

    photoinfo['slug'] = slug
    return photoinfo


def processsubdirectories(pathelements):
    """For each subdirectory inside the path described by pathelements,
    recursively generate either photo or album indexes."""
    dirname = os.path.join(*pathelements)  # pylint: disable=W0142
    MODULELOG.debug('Building subdir %s', pathelements)

    for subdir in getsubdirs(dirname):
        subdirelements = pathelements + [subdir]
        processsubdirectories(subdirelements)
        fullsubdir = os.path.join(dirname, subdir)

        # Build a list of all the photos in this subdirectory, their
        # thumbsnails, and their captions.
        photos = []
        for photo in sorted(os.listdir(fullsubdir)):
            photofilename = os.path.join(fullsubdir, photo)
            photoinfo = prepareimage(photofilename)
            if not photoinfo:
                continue
            photoinfo.update({
                'breadcrumbs': makebreadcrumbs(pathelements + [subdir, photoinfo['original']]),
                'caption': getcaptionfromfile(photofilename + '.markdown'),
                'photourl': makeurl(subdirelements, photoinfo['original']),
                'title': photoinfo['original']})
            photos.append(photoinfo)

        # If this subdirectory doesn't have photos in it, create an album index and move on.
        if not photos:
            generatealbumindex(subdirelements)
            continue

        # Otherwise create an album index.
        MODULELOG.debug('Indexing %d photos', len(photos))
        for photo in photos:
            bf.writer.materialize_template(
                'photo.mako',
                (fullsubdir, photo['original'] + '.html'),
                photo)
        bf.writer.materialize_template(
            'photo_index.mako',
            (fullsubdir, 'index.html'),
            {'breadcrumbs': makebreadcrumbs(subdirelements),
             'caption': getcaptionfromfile(os.path.join(fullsubdir, 'index.markdown')),
             'indexurl': makeurl(subdirelements, ''),
             'photos': photos,
             'slug': makepathslug(subdirelements),
             'title': '%s gallery' % subdir})
