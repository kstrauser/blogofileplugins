#!/usr/bin/env python

"""Full-featured photo gallery for Blogofile

This photo gallery features nested albums, Markdown captions for everything,
autogenerated thumbnails, navigation breadcrumbs, and Disqus comments.

To enable it:

1. Install Python Imaging Library, like "easy_install PIL"
2. Add something like this to your _config.py:

    controllers.photo_gallery.enabled = True
    controllers.photo_gallery.path = "pictures"
    controllers.photo_gallery.thumbnailsize = (200, 200)

3. Add something like this to your site's CSS file:

    .thumbnail { height: 128px; width: auto; margin: 5px; }
    .photo { width: 90%; }
    .gallery { float: left; margin: 10px; }
    .clear-block:after { clear:both; content:"."; display:block; height:0; visibility:hidden; }
    .clear-block { display:block; }
    * html .clear-block { height:1%; }

4. Copy your photos into the directory named in photo_gallery.path in step 2.

5. Directories can either display links to subdirectories (an "album index")
*or* an index of the photos inside that directory, but not both. If a
directory contains both images and subdirectories, it will only render the
photo index and not the album index.

6. In each photo index, make a symlink called "showcase.jpg" to the image you want
to use as the link image in the album index which points to that photo index.

To add a caption to a directory, create a file in that directory named
"index.markdown".

To add a caption to a subdirectory named "foo", create a file named
"foo.markdown" in its parent directory.

To add a caption to "photo.jpg", create a file named "photo.jpg.markdown".

Inspired by Louwrentius's "'Improved' image gallery for Blogofile" at
http://louwrentius.com/blog/2011/01/'improved'-image-gallery-for-blogofile/
"""

# A retarded little photo gallery for Blogofile.
# Messed up by Louwrentius

# Read all the photos in the /photos directory and create a page for each along
# with Disqus comments.

import logging
import os
from PIL import Image

from blogofile.cache import bf
from blogofile.config import recompile

config = {  # pylint: disable=C0103
    'name': 'Photo Galleries',
    'description': 'Nested photo albums with thumbnails, breadcrumbs, Markdown captions, etc.',
    'author': 'Kirk Strauser <kirk@strauser.com>',
}

MODULELOG = logging.getLogger(__name__)
MODULELOG.setLevel(logging.INFO)

CONFIG = bf.config.controllers.photo_gallery


def init():
    """Update the config to remove photo gallery caption files from _site"""
    photopath = bf.config.controllers.photo_gallery.path
    bf.config.site.file_ignore_patterns.append(
        '^%s/.*\.markdown$' % photopath)
    recompile()


def run():
    """Recursively build the photo galleries and directory indexes"""
    MODULELOG.info('Building the photo galleries')
    processsubdirectories([CONFIG.path])
    generatealbumindex([CONFIG.path])


def getsubdirs(dirname):
    """Return a list of names of subdirectories in the named directory"""
    return [subdir for subdir in os.listdir(dirname)
            if os.path.isdir(os.path.join(dirname, subdir))]


def generatealbumindex(pathelements):
    """Create an index page with links to all child albums in the directory"""
    dirname = os.path.join(*pathelements)  # pylint: disable=W0142
    subdirs = [(subdir, getcaptionfromfile(os.path.join(dirname, subdir + '.markdown')))
               for subdir in getsubdirs(dirname)
               if os.listdir(os.path.join(dirname, subdir))]
    bf.writer.materialize_template(
        'photo_album_index.mako',
        (dirname, "index.html"),
        {'breadcrumbs': makebreadcrumbs(pathelements),
         'caption': getcaptionfromfile(os.path.join(dirname, 'index.markdown')),
         'indexurl': makeurl(pathelements, ''),
         'dirs': subdirs})


def getcaptionfromfile(filename):
    """Return the contents of the named file after running it through the
    markdown filter"""
    try:
        with open(filename) as captionfile:
            return bf.filter.run_chain('markdown', captionfile.read())
    except IOError:
        return ''


def makebreadcrumbs(pathelements):
    """Return HTML representing the path to the deepest element, where each
    ancestor (but not the current directory) is a clickable to that directory"""
    breadcrumbs = []
    curpath = '/'
    for element in pathelements[:-1]:
        curpath = curpath + element + '/'
        breadcrumbs.append('<a href="%s">%s</a>' % (curpath, element))
    breadcrumbs.append(pathelements[-1])
    return '&nbsp;/&nbsp;'.join(breadcrumbs)


def makeurl(pathelements, filename):
    """Given all the elements describing a location, return a link to it"""
    return '%s%s/%s' % (
        bf.config.site.url,
        '/'.join(pathelements),
        filename)


def processsubdirectories(pathelements):
    """For each subdirectory inside the path described by pathelements,
    recursively generate either photo or album indexes."""
    dirname = os.path.join(*pathelements)  # pylint: disable=W0142
    MODULELOG.debug('Building subdir %s', pathelements)

    for subdir in getsubdirs(dirname):
        processsubdirectories(pathelements + [subdir])
        fullsubdir = os.path.join(dirname, subdir)

        # Build a list of all the photos in this subdirectory, their
        # thumbsnails, and their captions.
        photos = []
        for photo in os.listdir(fullsubdir):
            photofilename = os.path.join(fullsubdir, photo)
            if photo.lower().endswith('.jpg') \
              and not photo.lower().endswith('-thumb.jpg') \
              and not os.path.islink(photofilename):

                # If this photo doesn't have a thumbnail already, make one
                thumbfilename = '%s-thumb%s' % os.path.splitext(photofilename)
                if not os.path.exists(thumbfilename):
                    MODULELOG.debug('Thumbnailing %s => %s', photofilename, thumbfilename)
                    image = Image.open(photofilename)
                    image.thumbnail(CONFIG.thumbnailsize, Image.ANTIALIAS)
                    image.save(thumbfilename, 'JPEG')
                thumb = os.path.basename(thumbfilename)

                photos.append({
                    'photo': photo,
                    'thumb': thumb,
                    'caption': getcaptionfromfile(photofilename + '.markdown')})

        # If this subdirectory has photos in it, create a photo index.
        # Otherwise create an album index.
        if photos:
            MODULELOG.debug('Indexing %d photos', len(photos))
            for photo in photos:
                bf.writer.materialize_template(
                    'photo.mako',
                    (fullsubdir, photo['photo'] + '.html'),
                    {'breadcrumbs': makebreadcrumbs(pathelements + [subdir, photo['photo']]),
                     'photo': photo,
                     'photourl': makeurl(pathelements + [subdir], photo['photo'])})

            bf.writer.materialize_template(
                'photo_index.mako',
                (fullsubdir, 'index.html'),
                {'breadcrumbs': makebreadcrumbs(pathelements + [subdir]),
                 'caption': getcaptionfromfile(os.path.join(fullsubdir, 'index.markdown')),
                 'indexurl': makeurl(pathelements + [subdir], ''),
                 'photos': photos})
        else:
            generatealbumindex(pathelements + [subdir])
